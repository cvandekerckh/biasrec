
https://console.cloud.google.com/
Machine E2
e2-medium
allow http-https

Two options :
---> ssh from terminal :
- install gcloud
- create clef ssh
- gcloud compute ssh biasrecv2

---> ssh from web browser : juste cliquer sur le bouton ssh


Passwordless login
------------------
skip la partie add-user
uniquement la partie ssh
skip ssh ubuntu@...

Secure your server
-------------------
skip

Installing base dependencies
----------------------------


sudo apt-get install mariadb-server (instead of mysql-server)


[OPTIONAL] install python using pyenv instead :
(1) sudo apt-get install -y make build-essential libssl-dev zlib1g-dev \
libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev \
libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev

(2) sudo apt install python3-openssl

(3) curl https://pyenv.run | bash

(4)
pyenv install -v 3.10.1
pyenv global 3.10.1

[OPTIONAL 2] Install pipenv
(1)
pip install --user pipenv

(2)
vim ~/.profile (ou nano ~/.profile) et ecrire dans le fichier à la fin : PATH=$PATH:/home/cvandekerckh/.local/bin
source ~/.profile


Installing the application
--------------------------
- soit, on s'en fou, on travaille au global, et on fait pip install X pour chaque package
- soit, on travaille avec pipenv, il suffit juste d'écrire "pipenv install" si et seulement si tu as un fichier Pipfile à jour




vim .env
SECRET_KEY= secret-key
DATABASE_URL=mysql+pymysql://microblog:n4T6-s2C@localhost:3306/microblog

vim .flaskenv
FLASK_APP=microapp.py

create user 'microblog'@'localhost' identified by 'n4T6-s2C';

[program:microblog]
command=/home/cvandekerckh/.local/share/virtualenvs/biasrec-0gOARrar/bin/gunicorn -b localhost:8000 -w 4 microapp:app
directory=/home/cvandekerckh/biasrec
user=cvandekerckh
autostart=true
autorestart=true
stopasgroup=true
killasgroup=true


server {
    # listen on port 80 (http)
    listen 80;
    server_name _;
    location / {
        # redirect any requests to the same URL but on https
        return 301 https://$host$request_uri;
    }
}
server {
    # listen on port 443 (https)
    listen 443 ssl;
    server_name _;

    # location of the self-signed SSL certificate
    ssl_certificate /home/cvandekerckh/certs/cert.pem;
    ssl_certificate_key /home/cvandekerckh/certs/key.pem;

    # write access and error logs to /var/log
    access_log /var/log/microblog_access.log;
    error_log /var/log/microblog_error.log;

    location / {
        # forward application requests to the gunicorn server
        proxy_pass http://localhost:8000;
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /static {
        # handle static files directly, without forwarding to the application
        alias /home/cvandekerckh/biasrec/app/static;
        expires 30d;
    }
}

Test website (just before deploying application)

# Register a domain
https://cloud.google.com/domains/docs/buy-register-domain
and wait 24H

# Point domain to IP:
https://cloud.google.com/dns/docs/tutorials/create-domain-tutorial
section : Set up your domain using Cloud DNS

# Promote to static IP (allowing to restart machine)
Go to VPC Networks on GCP, Check the external IP address. 
Three little dots : promote to static IP

# Certificate
https://blog.miguelgrinberg.com/post/running-your-flask-application-over-https
Using "Real" Certificates

certbot instructions seems deprecated. 
Instead: 
https://certbot.eff.org/instructions
lsb_release -a to know your version of debian

when running "sudo certbot -- nginx" : I got the following error : 
Could not automatically find a matching server block for uclouvain-experiment.com. Set the `server_name` directive to use the Nginx installer.

first, locate the certificates : /etc/letsencrypt/live/uclouvain-experiment.com/

then change the nginx config : 
sudo vim /etc/nginx/sites-available/microblog
and add in the first part (80):

    server_name uclouvain-experiment.com;
    location ~ /.well-known {
            root /etc/letsencrypt/live/uclouvain-experiment.com/;
    }
then reload nginx : sudo systemctl reload nginx

$ sudo certbot certonly --webroot -w /etc/letsencrypt/live/uclouvain-experiment.com/ -d uclouvain-experiment.com

When renewing certificate, got a 403 issue (forbidden). Solved by adapting the nginx conf file : 

server {
    # Listen on port 80 (http)
    listen 80;
    server_name uclouvain-experiment.com;

    # Handle Let's Encrypt ACME challenges
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        allow all;
    }

    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    # Listen on port 443 (https)
    listen 443 ssl;
    server_name uclouvain-experiment.com;

    # Location of the SSL certificate
    ssl_certificate /etc/letsencrypt/live/uclouvain-experiment.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/uclouvain-experiment.com/privkey.pem;

    # Write access and error logs to /var/log
    access_log /var/log/microblog_access.log;
    error_log /var/log/microblog_error.log;

    # Proxy requests to the Gunicorn server
    location / {
        proxy_pass http://localhost:8000;
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # Serve static files directly
    location /static {
        alias /home/cvandekerckh/biasrec/app/static;
        expires 30d;
    }
}

restart nginx
created a var directory with correct access : 
sudo chown -R www-data:www-data /var/www/certbot
sudo chmod -R 755 /var/www/certbot

Debug by :
sudo mkdir -p /var/www/certbot/.well-known/acme-challenge
echo "test" | sudo tee /var/www/certbot/.well-known/acme-challenge/test-file
and accessing : http://uclouvain-experiment.com/.well-known/acme-challenge/test-file


 and then sudo certbot certonly --webroot -w /var/www/certbot -d uclouvain-experiment.com

